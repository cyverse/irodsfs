#! /usr/bin/env python3

import os
import sys
import subprocess
import time

from os import listdir
from urllib.parse import urlparse

# mount -t irodsfs URL /opt/mount
#[0] /sbin/mount.irodsfs
#[1] URL
#[2] /opt/mount

def which(program):
    pathenv = os.getenv('PATH')
    if not pathenv:
        pathenv = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

    for p in pathenv.split(os.path.pathsep):
        binpath = os.path.join(p, program)
        if os.path.exists(binpath) and os.access(binpath, os.X_OK):
            return binpath
    return None

def reorderArgs(argv):
    command = ""
    options = []
    positionalArgs = []
    skipCount = 0
    mountTimeout = 60
    for idx, arg in enumerate(argv):
        if idx == 0:
            command = arg
            continue

        if skipCount > 0:
            skipCount -= 1
            continue

        if arg == "-o":
            # option
            fuseOptions = argv[idx+1].split(",")
            for fo in fuseOptions:
                fokv = fo.split("=")
                if len(fokv) == 1:
                    # -o xxx
                    if fokv[0] == "ro" or fokv[0] == "readonly":
                        options.append("--readonly")
                    elif fokv[0] == "allow_other":
                        options.append("--allow_other")
                    elif fokv[0] == "f":
                        options.append("--foreground")
                    else:
                        options.append("-o")
                        options.append(fokv[0])
                elif len(fokv) == 2:
                    # -o kk=vv
                    if fokv[0] == "mounttimeout":
                        mountTimeout = int(fokv[1])
                        if mountTimeout <= 0:
                            mountTimeout = 10
                    else:
                        options.append("--%s" % fokv[0])
                        options.append(fokv[1])

            skipCount = 1
        else:
            positionalArgs.append(arg)

    reorderedArgs = []
    reorderedArgs.append(command)
    reorderedArgs.extend(options)

    if len(positionalArgs) > 1:
        if positionalArgs[0] == "irodsfs":
            # device type
            positionalArgs = positionalArgs[1:]

    reorderedArgs.extend(positionalArgs)

    return reorderedArgs, mountTimeout

def check_mount(mountPoint, mountTimeout):
    retry = 0
    while retry < mountTimeout:
        try:
            time.sleep(1)

            with open('/proc/mounts', 'r') as f:
                for line in f.readlines():
                    fields = line.split()
                    if len(fields) >= 3:
                        program = fields[0].strip()

                        if program.lower() == "irodsfs":
                            mountPath = fields[1].strip()
                            mountType = fields[2].strip()

                            if mountPath == mountPoint and mountType.lower() == "fuse.irodsfs":
                                return True

            retry += 1
        except FileNotFoundError as e:
            print("file not found: %s" % e, file=sys.stderr)
            retry += 1
        except OSError as e:
            print("os error: %s" % e, file=sys.stderr)
            retry += 1

    print("fuse mount not found for %s, after %d seconds" % (mountPoint, mountTimeout), file=sys.stderr)
    print("mount dump >", file=sys.stderr)
    with open('/proc/mounts', 'r') as f:
        for line in f.readlines():
            print(line, file=sys.stderr)
    print("mount dump end", file=sys.stderr)

    return False

def run_command(command_argv):
    pathenv = os.getenv('PATH')
    if not pathenv:
        pathenv = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        vars_dict = {}
        vars_dict["PATH"] = pathenv
        os.environ.update(vars_dict)

    # returns exit code
    return os.spawnvpe(os.P_WAIT, command_argv[0], command_argv, os.environ)

def main(argv):
    irodsBin = which("irodsfs")

    if not irodsBin:
        print("failed to find irodsfs (iRODS FUSE Lite) installed from PATH environment", file=sys.stderr)
        sys.exit(1)

    print("found irodsfs > %s" % irodsBin)

    reorderedArgv, mountTimeout = reorderArgs(argv)

    if len(reorderedArgv) <= 2:
        print("not enough number of arguments given", file=sys.stderr)
        sys.exit(1)

    mountPoint = reorderedArgv[-1]
    mountPoint = os.path.abspath(os.path.expanduser(mountPoint))

    command = "%s %s" % (irodsBin, " ".join(reorderedArgv[1:]))
    print("executing > %s" % command)
    exitcode = run_command(command.split())
    if exitcode > 0:
        print("failed to mount (irodsfs exited with exitcode %d)" % exitcode, file=sys.stderr)
        sys.exit(exitcode)
    elif exitcode < 0:
        print("failed to mount (irodsfs exited with SIG %d)" % exitcode, file=sys.stderr)
        sys.exit(1)

    if not check_mount(mountPoint, mountTimeout):
        print("failed to mount", file=sys.stderr)
        sys.exit(1)

    sys.exit(0)


if __name__ == "__main__":
    main(sys.argv)
